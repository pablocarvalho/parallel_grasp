//--------------------------------------------------------------------------- 

#include "dmer.h"

//---------------------------------------------------------------------------  

Dmer::Dmer(const char * name, int MaxIter)
{ 
  /* tempo inicial */
  t_ini  = (unsigned long int) clock();

  strcpy(nome, name);
  le_dados(MaxIter);   /* carrega a estrutura custo a partir do arquivo de entrada */

} 

//--------------------------------------------------------------------------- 
 
/* funcao de tempo */
double Dmer::calcula_tempo(const unsigned long int ini, const unsigned long int fim)
{
  double r;

  if(fim >= ini)
    r = ((double)(fim - ini)) / CLOCKS_PER_SEC;
  else
    r = ((double)( (fim + (unsigned long int)-1) - ini)) / CLOCKS_PER_SEC;
  return r;
}

//--------------------------------------------------------------------------- 
 
void Dmer::le_dados(int MaxIter)
{ 
  int           jj;
  char          arq[256];
  std::ifstream fin; 
  Array<int>    f; 
  Array<int>    f2; 
  Array<int>    f3;
  Array<int>    f4;
  Array<int>    f5;
  Array<int>    f6;
  Array<int>    atc;

  //int    DEPU         = 1;
  int    TEST         = 0;
  
  unsigned long int   t_ini2;
 
  strcpy(arq,nome);
  fin.open(arq);

  /* constroi grafo de sinais */
  //if (DEPU) std::cout<<"   -> Constroi grafo...";
  sg.ini(fin);
  //if (DEPU) std::cout<<" ok!"<<std::endl;

  /* aloca */
  f.aloca(sg.n+5);
  f2.aloca(sg.n+5);
  f3.aloca(sg.n+5);
  f4.aloca(sg.n+5);
  f5.aloca(sg.n+5);
  f6.aloca(sg.n+5);

  t_ini2  = (unsigned long int) clock();
  jj = sg.grasp_sig_v2(sg.vet1, f, sg.vet2, f2, sg.vet3, f3, sg.vet4, f4, f5, f6, MaxIter, TEST);
  std::cout<<std::endl<<nome<<" GRASP = "<<jj<<" Tempo = "<<calcula_tempo(t_ini2, (unsigned long int) clock())<<std::endl;

  /* desaloca */
  r.desaloca();
  b.desaloca();
  J.desaloca();
  f.desaloca();
  f2.desaloca();
  f3.desaloca();
  f4.desaloca();
  f5.desaloca();
  f6.desaloca();
  atc.desaloca();

  fin.close();
} 


  
